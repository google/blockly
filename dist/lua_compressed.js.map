{"version":3,"sources":["generators/lua/lists.ts","generators/lua/logic.ts","generators/lua/loops.ts","generators/lua/math.ts","generators/lua/procedures.ts","generators/lua/text.ts","generators/lua/variables.ts","generators/lua/lua_generator.ts","generators/lua/variables_dynamic.ts","generators/lua.ts"],"names":["lists_create_empty","block","generator","Order","HIGH","lists_create_with","elements","Array","itemCount_","i","valueToCode","NONE","join","lists_repeat","functionName","provideFunction_","FUNCTION_NAME_PLACEHOLDER_","element","repeatCount","lists_length","UNARY","lists_isEmpty","RELATIONAL","lists_indexOf","item","list","getFieldValue","lists_getIndex","mode","where","match","at","atOrder","ADDITIVE","getListIndex","code","listVar","nameDB_","getDistinctName","NameType","VARIABLE","toLowerCase","lists_setIndex","value","lists_getSublist","where1","where2","at1","at2","at1Param","at2Param","lists_sort","direction","type","lists_split","input","delimiter","Error","lists_reverse","controls_if","n","STATEMENT_PREFIX","injectId","conditionCode","branchCode","statementToCode","STATEMENT_SUFFIX","prefixLines","INDENT","getInput","logic_compare","operator","OPERATORS","argument0","argument1","logic_operation","order","AND","OR","defaultArgument","logic_negate","logic_boolean","ATOMIC","logic_null","logic_ternary","value_if","value_then","value_else","addContinueLabel","branch","indent","includes","CONTINUE_STATEMENT","controls_repeat_ext","repeats","getField","String","Number","isNumber","parseInt","addLoopTrap","loopVar","controls_whileUntil","until","controls_for","variable0","getVariableName","startVar","endVar","increment","incValue","Math","abs","step","controls_forEach","controls_flow_statements","xfix","loop","getSurroundLoop","suppressPrefixSuffix","math_number","math_arithmetic","tuple","MULTIPLICATIVE","EXPONENTIATION","math_single","arg","math_constant","CONSTANTS","math_number_property","PROPERTIES","dropdownProperty","suffix","inputOrder","outputOrder","numberToCheck","divisor","math_change","varName","math_on_list","provideSum","func","math_modulo","math_constrain","argument2","math_random_int","math_random_float","math_atan2","procedures_defreturn","funcName","getProcedureName","xfix1","loopTrap","INFINITE_LOOP_TRAP","returnValue","xfix2","args","variables","getVars","length","scrub_","definitions_","procedures_callreturn","procedures_callnoreturn","forBlock","procedures_ifreturn","hasReturnValue_","text","quote_","text_join","element0","CONCATENATION","element1","text_append","text_length","text_isEmpty","text_indexOf","substring","text_charAt","start","text_getSubstring","at1Order","at2Order","end","text_changeCase","text_trim","LEFT","RIGHT","BOTH","text_print","text_prompt_ext","msg","text_count","sub","text_replace","from","to","text_reverse","variables_get","variables_set","LuaGenerator","CodeGenerator","constructor","name","isInitialized","key","addReservedWords","init","workspace","reset","Names","RESERVED_WORDS_","setVariableMap","getVariableMap","populateVariables","populateProcedures","finish","definitions","Object","values","scrubNakedValue","line","string","replace","multiline_quote_","split","map","lines","thisOnly","commentCode","outputConnection","targetConnection","comment","getCommentText","wrap","COMMENT_WRAP","inputList","inputTypes","VALUE","childBlock","connection","targetBlock","allNestedComments","nextBlock","nextConnection","nextCode","blockToCode","$jscomp$tmp$exports$module$name","listName","opt_at","controls_ifelse","controls_repeat","math_round","math_trig","procedures_defnoreturn","text_prompt","luaGenerator","generators","lists","logic","loops","math","procedures","variablesDynamic"],"mappings":"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","file":"lua_compressed.js","sourcesContent":["/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for list blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.lists\n\nimport type {CreateWithBlock} from '../../blocks/lists.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function lists_create_empty(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Create an empty list.\n  return ['{}', Order.HIGH];\n}\n\nexport function lists_create_with(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  const createWithBlock = block as CreateWithBlock;\n  // Create a list with any number of elements of any type.\n  const elements = new Array(createWithBlock.itemCount_);\n  for (let i = 0; i < createWithBlock.itemCount_; i++) {\n    elements[i] =\n      generator.valueToCode(createWithBlock, 'ADD' + i, Order.NONE) || 'nil';\n  }\n  const code = '{' + elements.join(', ') + '}';\n  return [code, Order.HIGH];\n}\n\nexport function lists_repeat(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Create a list with one element repeated.\n  const functionName = generator.provideFunction_(\n    'create_list_repeated',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(item, count)\n  local t = {}\n  for i = 1, count do\n    table.insert(t, item)\n  end\n  return t\nend\n  `,\n  );\n  const element = generator.valueToCode(block, 'ITEM', Order.NONE) || 'nil';\n  const repeatCount = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  const code = functionName + '(' + element + ', ' + repeatCount + ')';\n  return [code, Order.HIGH];\n}\n\nexport function lists_length(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // String or array length.\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  return ['#' + list, Order.UNARY];\n}\n\nexport function lists_isEmpty(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const list = generator.valueToCode(block, 'VALUE', Order.UNARY) || '{}';\n  const code = '#' + list + ' == 0';\n  return [code, Order.RELATIONAL];\n}\n\nexport function lists_indexOf(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Find an item in the list.\n  const item = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const list = generator.valueToCode(block, 'VALUE', Order.NONE) || '{}';\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_(\n      'first_index',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for k, v in ipairs(t) do\n    if v == elem then\n      return k\n    end\n  end\n  return 0\nend\n`,\n    );\n  } else {\n    functionName = generator.provideFunction_(\n      'last_index',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t, elem)\n  for i = #t, 1, -1 do\n    if t[i] == elem then\n      return i\n    end\n  end\n  return 0\nend\n`,\n    );\n  }\n  const code = functionName + '(' + list + ', ' + item + ')';\n  return [code, Order.HIGH];\n}\n\n/**\n * Returns an expression calculating the index into a list.\n *\n * @param listName Name of the list, used to calculate length.\n * @param where The method of indexing, selected by dropdown in Blockly\n * @param opt_at The optional offset when indexing from start/end.\n * @returns Index expression.\n */\nconst getListIndex = function (\n  listName: string,\n  where: string,\n  opt_at: string,\n): string {\n  if (where === 'FIRST') {\n    return '1';\n  } else if (where === 'FROM_END') {\n    return '#' + listName + ' + 1 - ' + opt_at;\n  } else if (where === 'LAST') {\n    return '#' + listName;\n  } else if (where === 'RANDOM') {\n    return 'math.random(#' + listName + ')';\n  } else {\n    return opt_at;\n  }\n};\n\nexport function lists_getIndex(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] | string {\n  // Get element at index.\n  // Note: Until January 2013 this block did not have MODE or WHERE inputs.\n  const mode = block.getFieldValue('MODE') || 'GET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const list = generator.valueToCode(block, 'VALUE', Order.HIGH) || '({})';\n\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if (\n    (where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n    !list.match(/^\\w+$/)\n  ) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    if (mode === 'REMOVE') {\n      // We can use multiple statements.\n      const atOrder = where === 'FROM_END' ? Order.ADDITIVE : Order.NONE;\n      let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n      const listVar = generator.nameDB_!.getDistinctName(\n        'tmp_list',\n        NameType.VARIABLE,\n      );\n      at = getListIndex(listVar, where, at);\n      const code =\n        listVar +\n        ' = ' +\n        list +\n        '\\n' +\n        'table.remove(' +\n        listVar +\n        ', ' +\n        at +\n        ')\\n';\n      return code;\n    } else {\n      // We need to create a procedure to avoid reevaluating values.\n      const at = generator.valueToCode(block, 'AT', Order.NONE) || '1';\n      let functionName;\n      if (mode === 'GET') {\n        functionName = generator.provideFunction_(\n          'list_get_' + where.toLowerCase(),\n          [\n            'function ' +\n              generator.FUNCTION_NAME_PLACEHOLDER_ +\n              '(t' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              (where === 'FROM_END' || where === 'FROM_START' ? ', at)' : ')'),\n            '  return t[' + getListIndex('t', where, 'at') + ']',\n            'end',\n          ],\n        );\n      } else {\n        // `mode` === 'GET_REMOVE'\n        functionName = generator.provideFunction_(\n          'list_remove_' + where.toLowerCase(),\n          [\n            'function ' +\n              generator.FUNCTION_NAME_PLACEHOLDER_ +\n              '(t' +\n              // The value for 'FROM_END' and'FROM_START' depends on `at` so\n              // we add it as a parameter.\n              (where === 'FROM_END' || where === 'FROM_START' ? ', at)' : ')'),\n            '  return table.remove(t, ' + getListIndex('t', where, 'at') + ')',\n            'end',\n          ],\n        );\n      }\n      const code =\n        functionName +\n        '(' +\n        list +\n        // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n        // pass it.\n        (where === 'FROM_END' || where === 'FROM_START' ? ', ' + at : '') +\n        ')';\n      return [code, Order.HIGH];\n    }\n  } else {\n    // Either `list` is a simple variable, or we only need to refer to `list`\n    // once.\n    const atOrder =\n      mode === 'GET' && where === 'FROM_END' ? Order.ADDITIVE : Order.NONE;\n    let at = generator.valueToCode(block, 'AT', atOrder) || '1';\n    at = getListIndex(list, where, at);\n    if (mode === 'GET') {\n      const code = list + '[' + at + ']';\n      return [code, Order.HIGH];\n    } else {\n      const code = 'table.remove(' + list + ', ' + at + ')';\n      if (mode === 'GET_REMOVE') {\n        return [code, Order.HIGH];\n      } else {\n        // `mode` === 'REMOVE'\n        return code + '\\n';\n      }\n    }\n  }\n}\n\nexport function lists_setIndex(block: Block, generator: LuaGenerator): string {\n  // Set element at index.\n  // Note: Until February 2013 this block did not have MODE or WHERE inputs.\n  let list = generator.valueToCode(block, 'LIST', Order.HIGH) || '{}';\n  const mode = block.getFieldValue('MODE') || 'SET';\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const at = generator.valueToCode(block, 'AT', Order.ADDITIVE) || '1';\n  const value = generator.valueToCode(block, 'TO', Order.NONE) || 'Nil';\n\n  let code = '';\n  // If `list` would be evaluated more than once (which is the case for LAST,\n  // FROM_END, and RANDOM) and is non-trivial, make sure to access it only once.\n  if (\n    (where === 'LAST' || where === 'FROM_END' || where === 'RANDOM') &&\n    !list.match(/^\\w+$/)\n  ) {\n    // `list` is an expression, so we may not evaluate it more than once.\n    // We can use multiple statements.\n    const listVar = generator.nameDB_!.getDistinctName(\n      'tmp_list',\n      NameType.VARIABLE,\n    );\n    code = listVar + ' = ' + list + '\\n';\n    list = listVar;\n  }\n  if (mode === 'SET') {\n    code += list + '[' + getListIndex(list, where, at) + '] = ' + value;\n  } else {\n    // `mode` === 'INSERT'\n    // LAST is a special case, because we want to insert\n    // *after* not *before*, the existing last element.\n    code +=\n      'table.insert(' +\n      list +\n      ', ' +\n      (getListIndex(list, where, at) + (where === 'LAST' ? ' + 1' : '')) +\n      ', ' +\n      value +\n      ')';\n  }\n  return code + '\\n';\n}\n\nexport function lists_getSublist(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Get sublist.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const where1 = block.getFieldValue('WHERE1');\n  const where2 = block.getFieldValue('WHERE2');\n  const at1 = generator.valueToCode(block, 'AT1', Order.NONE) || '1';\n  const at2 = generator.valueToCode(block, 'AT2', Order.NONE) || '1';\n\n  // The value for 'FROM_END' and'FROM_START' depends on `at` so\n  // we add it as a parameter.\n  const at1Param =\n    where1 === 'FROM_END' || where1 === 'FROM_START' ? ', at1' : '';\n  const at2Param =\n    where2 === 'FROM_END' || where2 === 'FROM_START' ? ', at2' : '';\n  const functionName = generator.provideFunction_(\n    'list_sublist_' + where1.toLowerCase() + '_' + where2.toLowerCase(),\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(source${at1Param}${at2Param})\n  local t = {}\n  local start = ${getListIndex('source', where1, 'at1')}\n  local finish = ${getListIndex('source', where2, 'at2')}\n  for i = start, finish do\n    table.insert(t, source[i])\n  end\n  return t\nend\n`,\n  );\n  const code =\n    functionName +\n    '(' +\n    list +\n    // The value for 'FROM_END' and 'FROM_START' depends on `at` so we\n    // pass it.\n    (where1 === 'FROM_END' || where1 === 'FROM_START' ? ', ' + at1 : '') +\n    (where2 === 'FROM_END' || where2 === 'FROM_START' ? ', ' + at2 : '') +\n    ')';\n  return [code, Order.HIGH];\n}\n\nexport function lists_sort(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Block for sorting a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const direction = block.getFieldValue('DIRECTION') === '1' ? 1 : -1;\n  const type = block.getFieldValue('TYPE');\n\n  const functionName = generator.provideFunction_(\n    'list_sort',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(list, typev, direction)\n  local t = {}\n  for n,v in pairs(list) do table.insert(t, v) end\n  local compareFuncs = {\n    NUMERIC = function(a, b)\n      return (tonumber(tostring(a)) or 0)\n          < (tonumber(tostring(b)) or 0) end,\n    TEXT = function(a, b)\n      return tostring(a) < tostring(b) end,\n    IGNORE_CASE = function(a, b)\n      return string.lower(tostring(a)) < string.lower(tostring(b)) end\n  }\n  local compareTemp = compareFuncs[typev]\n  local compare = compareTemp\n  if direction == -1\n  then compare = function(a, b) return compareTemp(b, a) end\n  end\n  table.sort(t, compare)\n  return t\nend\n`,\n  );\n\n  const code =\n    functionName + '(' + list + ',\"' + type + '\", ' + direction + ')';\n  return [code, Order.HIGH];\n}\n\nexport function lists_split(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Block for splitting text into a list, or joining a list into text.\n  let input = generator.valueToCode(block, 'INPUT', Order.NONE);\n  const delimiter = generator.valueToCode(block, 'DELIM', Order.NONE) || \"''\";\n  const mode = block.getFieldValue('MODE');\n  let functionName;\n  if (mode === 'SPLIT') {\n    if (!input) {\n      input = \"''\";\n    }\n    functionName = generator.provideFunction_(\n      'list_string_split',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input, delim)\n  local t = {}\n  local pos = 1\n  while true do\n    next_delim = string.find(input, delim, pos)\n    if next_delim == nil then\n      table.insert(t, string.sub(input, pos))\n      break\n    else\n      table.insert(t, string.sub(input, pos, next_delim-1))\n      pos = next_delim + #delim\n    end\n  end\n  return t\nend\n`,\n    );\n  } else if (mode === 'JOIN') {\n    if (!input) {\n      input = '{}';\n    }\n    functionName = 'table.concat';\n  } else {\n    throw Error('Unknown mode: ' + mode);\n  }\n  const code = functionName + '(' + input + ', ' + delimiter + ')';\n  return [code, Order.HIGH];\n}\n\nexport function lists_reverse(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Block for reversing a list.\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  const functionName = generator.provideFunction_(\n    'list_reverse',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(input)\n  local reversed = {}\n  for i = #input, 1, -1 do\n    table.insert(reversed, input[i])\n  end\n  return reversed\nend\n`,\n  );\n  const code = functionName + '(' + list + ')';\n  return [code, Order.HIGH];\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for logic blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.logic\n\nimport type {Block} from '../../core/block.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function controls_if(block: Block, generator: LuaGenerator): string {\n  // If/elseif/else condition.\n  let n = 0;\n  let code = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    code += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  do {\n    const conditionCode =\n      generator.valueToCode(block, 'IF' + n, Order.NONE) || 'false';\n    let branchCode = generator.statementToCode(block, 'DO' + n);\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code +=\n      (n > 0 ? 'else' : '') + 'if ' + conditionCode + ' then\\n' + branchCode;\n    n++;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE') || generator.STATEMENT_SUFFIX) {\n    let branchCode = generator.statementToCode(block, 'ELSE');\n    if (generator.STATEMENT_SUFFIX) {\n      branchCode =\n        generator.prefixLines(\n          generator.injectId(generator.STATEMENT_SUFFIX, block),\n          generator.INDENT,\n        ) + branchCode;\n    }\n    code += 'else\\n' + branchCode;\n  }\n  return code + 'end\\n';\n}\n\nexport const controls_ifelse = controls_if;\n\nexport function logic_compare(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Comparison operator.\n  const OPERATORS = {\n    'EQ': '==',\n    'NEQ': '~=',\n    'LT': '<',\n    'LTE': '<=',\n    'GT': '>',\n    'GTE': '>=',\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const argument0 = generator.valueToCode(block, 'A', Order.RELATIONAL) || '0';\n  const argument1 = generator.valueToCode(block, 'B', Order.RELATIONAL) || '0';\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, Order.RELATIONAL];\n}\n\nexport function logic_operation(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Operations 'and', 'or'.\n  const operator = block.getFieldValue('OP') === 'AND' ? 'and' : 'or';\n  const order = operator === 'and' ? Order.AND : Order.OR;\n  let argument0 = generator.valueToCode(block, 'A', order);\n  let argument1 = generator.valueToCode(block, 'B', order);\n  if (!argument0 && !argument1) {\n    // If there are no arguments, then the return value is false.\n    argument0 = 'false';\n    argument1 = 'false';\n  } else {\n    // Single missing arguments have no effect on the return value.\n    const defaultArgument = operator === 'and' ? 'true' : 'false';\n    if (!argument0) {\n      argument0 = defaultArgument;\n    }\n    if (!argument1) {\n      argument1 = defaultArgument;\n    }\n  }\n  const code = argument0 + ' ' + operator + ' ' + argument1;\n  return [code, order];\n}\n\nexport function logic_negate(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Negation.\n  const argument0 = generator.valueToCode(block, 'BOOL', Order.UNARY) || 'true';\n  const code = 'not ' + argument0;\n  return [code, Order.UNARY];\n}\n\nexport function logic_boolean(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Boolean values true and false.\n  const code = block.getFieldValue('BOOL') === 'TRUE' ? 'true' : 'false';\n  return [code, Order.ATOMIC];\n}\n\nexport function logic_null(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Null data type.\n  return ['nil', Order.ATOMIC];\n}\n\nexport function logic_ternary(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Ternary operator.\n  const value_if = generator.valueToCode(block, 'IF', Order.AND) || 'false';\n  const value_then = generator.valueToCode(block, 'THEN', Order.AND) || 'nil';\n  const value_else = generator.valueToCode(block, 'ELSE', Order.OR) || 'nil';\n  const code = value_if + ' and ' + value_then + ' or ' + value_else;\n  return [code, Order.OR];\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for loop blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.loops\n\nimport type {ControlFlowInLoopBlock} from '../../blocks/loops.js';\nimport type {Block} from '../../core/block.js';\nimport {NameType} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\n/**\n * This is the text used to implement a <pre>continue</pre>.\n * It is also used to recognise <pre>continue</pre>s in generated code so that\n * the appropriate label can be put at the end of the loop body.\n */\nconst CONTINUE_STATEMENT = 'goto continue\\n';\n\n/**\n * If the loop body contains a \"goto continue\" statement, add a continue label\n * to the loop body. Slightly inefficient, as continue labels will be generated\n * in all outer loops, but this is safer than duplicating the logic of\n * blockToCode.\n *\n * @param branch Generated code of the loop body\n * @param indent Whitespace by which to indent a continue statement.\n * @returns Generated label or '' if unnecessary\n */\nfunction addContinueLabel(branch: string, indent: string): string {\n  if (branch.includes(CONTINUE_STATEMENT)) {\n    // False positives are possible (e.g. a string literal), but are harmless.\n    return branch + indent + '::continue::\\n';\n  } else {\n    return branch;\n  }\n}\n\nexport function controls_repeat_ext(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // Repeat n times.\n  let repeats;\n  if (block.getField('TIMES')) {\n    // Internal number.\n    repeats = String(Number(block.getFieldValue('TIMES')));\n  } else {\n    // External number.\n    repeats = generator.valueToCode(block, 'TIMES', Order.NONE) || '0';\n  }\n  if (stringUtils.isNumber(repeats)) {\n    repeats = parseInt(repeats, 10);\n  } else {\n    repeats = 'math.floor(' + repeats + ')';\n  }\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const loopVar = generator.nameDB_!.getDistinctName(\n    'count',\n    NameType.VARIABLE,\n  );\n  const code =\n    'for ' + loopVar + ' = 1, ' + repeats + ' do\\n' + branch + 'end\\n';\n  return code;\n}\n\nexport const controls_repeat = controls_repeat_ext;\n\nexport function controls_whileUntil(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // Do while/until loop.\n  const until = block.getFieldValue('MODE') === 'UNTIL';\n  let argument0 =\n    generator.valueToCode(block, 'BOOL', until ? Order.UNARY : Order.NONE) ||\n    'false';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  if (until) {\n    argument0 = 'not ' + argument0;\n  }\n  return 'while ' + argument0 + ' do\\n' + branch + 'end\\n';\n}\n\nexport function controls_for(block: Block, generator: LuaGenerator): string {\n  // For loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const startVar = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const endVar = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const increment = generator.valueToCode(block, 'BY', Order.NONE) || '1';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  let code = '';\n  let incValue;\n  if (\n    stringUtils.isNumber(startVar) &&\n    stringUtils.isNumber(endVar) &&\n    stringUtils.isNumber(increment)\n  ) {\n    // All arguments are simple numbers.\n    const up = Number(startVar) <= Number(endVar);\n    const step = Math.abs(Number(increment));\n    incValue = (up ? '' : '-') + step;\n  } else {\n    code = '';\n    // Determine loop direction at start, in case one of the bounds\n    // changes during loop execution.\n    incValue = generator.nameDB_!.getDistinctName(\n      variable0 + '_inc',\n      NameType.VARIABLE,\n    );\n    code += incValue + ' = ';\n    if (stringUtils.isNumber(increment)) {\n      code += Math.abs(increment as unknown as number) + '\\n';\n    } else {\n      code += 'math.abs(' + increment + ')\\n';\n    }\n    code += 'if (' + startVar + ') > (' + endVar + ') then\\n';\n    code += generator.INDENT + incValue + ' = -' + incValue + '\\n';\n    code += 'end\\n';\n  }\n  code +=\n    'for ' + variable0 + ' = ' + startVar + ', ' + endVar + ', ' + incValue;\n  code += ' do\\n' + branch + 'end\\n';\n  return code;\n}\n\nexport function controls_forEach(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // For each loop.\n  const variable0 = generator.getVariableName(block.getFieldValue('VAR'));\n  const argument0 = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let branch = generator.statementToCode(block, 'DO');\n  branch = generator.addLoopTrap(branch, block);\n  branch = addContinueLabel(branch, generator.INDENT);\n  const code =\n    'for _, ' +\n    variable0 +\n    ' in ipairs(' +\n    argument0 +\n    ') do \\n' +\n    branch +\n    'end\\n';\n  return code;\n}\n\nexport function controls_flow_statements(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // Flow statements: continue, break.\n  let xfix = '';\n  if (generator.STATEMENT_PREFIX) {\n    // Automatic prefix insertion is switched off for this block.  Add manually.\n    xfix += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the break/continue is triggered.\n    xfix += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (generator.STATEMENT_PREFIX) {\n    const loop = (block as ControlFlowInLoopBlock).getSurroundLoop();\n    if (loop && !loop.suppressPrefixSuffix) {\n      // Inject loop's statement prefix here since the regular one at the end\n      // of the loop will not get executed if 'continue' is triggered.\n      // In the case of 'break', a prefix is needed due to the loop's suffix.\n      xfix += generator.injectId(generator.STATEMENT_PREFIX, loop);\n    }\n  }\n  switch (block.getFieldValue('FLOW')) {\n    case 'BREAK':\n      return xfix + 'break\\n';\n    case 'CONTINUE':\n      return xfix + CONTINUE_STATEMENT;\n  }\n  throw Error('Unknown flow statement.');\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for math blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.math\n\nimport type {Block} from '../../core/block.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function math_number(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Numeric value.\n  const code = Number(block.getFieldValue('NUM'));\n  const order = code < 0 ? Order.UNARY : Order.ATOMIC;\n  return [String(code), order];\n}\n\nexport function math_arithmetic(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Basic arithmetic operators, and power.\n  const OPERATORS: Record<string, [string, Order]> = {\n    'ADD': [' + ', Order.ADDITIVE],\n    'MINUS': [' - ', Order.ADDITIVE],\n    'MULTIPLY': [' * ', Order.MULTIPLICATIVE],\n    'DIVIDE': [' / ', Order.MULTIPLICATIVE],\n    'POWER': [' ^ ', Order.EXPONENTIATION],\n  };\n  type OperatorOption = keyof typeof OPERATORS;\n  const tuple = OPERATORS[block.getFieldValue('OP') as OperatorOption];\n  const operator = tuple[0];\n  const order = tuple[1];\n  const argument0 = generator.valueToCode(block, 'A', order) || '0';\n  const argument1 = generator.valueToCode(block, 'B', order) || '0';\n  const code = argument0 + operator + argument1;\n  return [code, order];\n}\n\nexport function math_single(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Math operators with single operand.\n  const operator = block.getFieldValue('OP');\n  let arg;\n  if (operator === 'NEG') {\n    // Negation is a special case given its different operator precedence.\n    arg = generator.valueToCode(block, 'NUM', Order.UNARY) || '0';\n    return ['-' + arg, Order.UNARY];\n  }\n  if (operator === 'POW10') {\n    arg = generator.valueToCode(block, 'NUM', Order.EXPONENTIATION) || '0';\n    return ['10 ^ ' + arg, Order.EXPONENTIATION];\n  }\n  if (operator === 'ROUND') {\n    arg = generator.valueToCode(block, 'NUM', Order.ADDITIVE) || '0';\n  } else {\n    arg = generator.valueToCode(block, 'NUM', Order.NONE) || '0';\n  }\n\n  let code;\n  switch (operator) {\n    case 'ABS':\n      code = 'math.abs(' + arg + ')';\n      break;\n    case 'ROOT':\n      code = 'math.sqrt(' + arg + ')';\n      break;\n    case 'LN':\n      code = 'math.log(' + arg + ')';\n      break;\n    case 'LOG10':\n      code = 'math.log(' + arg + ', 10)';\n      break;\n    case 'EXP':\n      code = 'math.exp(' + arg + ')';\n      break;\n    case 'ROUND':\n      // This rounds up.  Blockly does not specify rounding direction.\n      code = 'math.floor(' + arg + ' + .5)';\n      break;\n    case 'ROUNDUP':\n      code = 'math.ceil(' + arg + ')';\n      break;\n    case 'ROUNDDOWN':\n      code = 'math.floor(' + arg + ')';\n      break;\n    case 'SIN':\n      code = 'math.sin(math.rad(' + arg + '))';\n      break;\n    case 'COS':\n      code = 'math.cos(math.rad(' + arg + '))';\n      break;\n    case 'TAN':\n      code = 'math.tan(math.rad(' + arg + '))';\n      break;\n    case 'ASIN':\n      code = 'math.deg(math.asin(' + arg + '))';\n      break;\n    case 'ACOS':\n      code = 'math.deg(math.acos(' + arg + '))';\n      break;\n    case 'ATAN':\n      code = 'math.deg(math.atan(' + arg + '))';\n      break;\n    default:\n      throw Error('Unknown math operator: ' + operator);\n  }\n  return [code, Order.HIGH];\n}\n\nexport function math_constant(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Constants: PI, E, the Golden Ratio, sqrt(2), 1/sqrt(2), INFINITY.\n  const CONSTANTS: Record<string, [string, Order]> = {\n    'PI': ['math.pi', Order.HIGH],\n    'E': ['math.exp(1)', Order.HIGH],\n    'GOLDEN_RATIO': ['(1 + math.sqrt(5)) / 2', Order.MULTIPLICATIVE],\n    'SQRT2': ['math.sqrt(2)', Order.HIGH],\n    'SQRT1_2': ['math.sqrt(1 / 2)', Order.HIGH],\n    'INFINITY': ['math.huge', Order.HIGH],\n  };\n  return CONSTANTS[block.getFieldValue('CONSTANT')];\n}\n\nexport function math_number_property(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Check if a number is even, odd, prime, whole, positive, or negative\n  // or if it is divisible by certain number. Returns true or false.\n  const PROPERTIES: Record<string, [string | null, Order, Order]> = {\n    'EVEN': [' % 2 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'ODD': [' % 2 == 1', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'WHOLE': [' % 1 == 0', Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'POSITIVE': [' > 0', Order.RELATIONAL, Order.RELATIONAL],\n    'NEGATIVE': [' < 0', Order.RELATIONAL, Order.RELATIONAL],\n    'DIVISIBLE_BY': [null, Order.MULTIPLICATIVE, Order.RELATIONAL],\n    'PRIME': [null, Order.NONE, Order.HIGH],\n  };\n  const dropdownProperty = block.getFieldValue('PROPERTY');\n  const [suffix, inputOrder, outputOrder] = PROPERTIES[dropdownProperty];\n  const numberToCheck =\n    generator.valueToCode(block, 'NUMBER_TO_CHECK', inputOrder) || '0';\n  let code;\n  if (dropdownProperty === 'PRIME') {\n    // Prime is a special case as it is not a one-liner test.\n    const functionName = generator.provideFunction_(\n      'math_isPrime',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(n)\n  -- https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n  if n == 2 or n == 3 then\n    return true\n  end\n  -- False if n is NaN, negative, is 1, or not whole.\n  -- And false if n is divisible by 2 or 3.\n  if not(n > 1) or n % 1 ~= 0 or n % 2 == 0 or n % 3 == 0 then\n    return false\n  end\n  -- Check all the numbers of form 6k +/- 1, up to sqrt(n).\n  for x = 6, math.sqrt(n) + 1.5, 6 do\n    if n % (x - 1) == 0 or n % (x + 1) == 0 then\n      return false\n    end\n  end\n  return true\nend\n`,\n    );\n    code = functionName + '(' + numberToCheck + ')';\n  } else if (dropdownProperty === 'DIVISIBLE_BY') {\n    const divisor =\n      generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n    // If 'divisor' is some code that evals to 0, generator will produce a nan.\n    // Let's produce nil if we can determine this at compile-time.\n    if (divisor === '0') {\n      return ['nil', Order.ATOMIC];\n    }\n    // The normal trick to implement ?: with and/or doesn't work here:\n    //   divisor == 0 and nil or number_to_check % divisor == 0\n    // because nil is false, so allow a runtime failure. :-(\n    code = numberToCheck + ' % ' + divisor + ' == 0';\n  } else {\n    code = numberToCheck + suffix;\n  }\n  return [code, outputOrder];\n}\n\nexport function math_change(block: Block, generator: LuaGenerator): string {\n  // Add to a variable in place.\n  const argument0 =\n    generator.valueToCode(block, 'DELTA', Order.ADDITIVE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + varName + ' + ' + argument0 + '\\n';\n}\n\n// Rounding functions have a single operand.\nexport const math_round = math_single;\n// Trigonometry functions have a single operand.\nexport const math_trig = math_single;\n\nexport function math_on_list(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Math functions for lists.\n  const func = block.getFieldValue('OP');\n  const list = generator.valueToCode(block, 'LIST', Order.NONE) || '{}';\n  let functionName;\n\n  // Functions needed in more than one case.\n  function provideSum() {\n    return generator.provideFunction_(\n      'math_sum',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local result = 0\n  for _, v in ipairs(t) do\n    result = result + v\n  end\n  return result\nend\n`,\n    );\n  }\n\n  switch (func) {\n    case 'SUM':\n      functionName = provideSum();\n      break;\n\n    case 'MIN':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_(\n        'math_min',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = math.huge\n  for _, v in ipairs(t) do\n    if v < result then\n      result = v\n    end\n  end\n  return result\nend\n`,\n      );\n      break;\n\n    case 'AVERAGE':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_(\n        'math_average',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  return ${provideSum()}(t) / #t\nend\n`,\n      );\n      break;\n\n    case 'MAX':\n      // Returns 0 for the empty list.\n      functionName = generator.provideFunction_(\n        'math_max',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return 0\n  end\n  local result = -math.huge\n  for _, v in ipairs(t) do\n    if v > result then\n      result = v\n    end\n  end\n  return result\nend\n`,\n      );\n      break;\n\n    case 'MEDIAN':\n      // This operation excludes non-numbers.\n      functionName = generator.provideFunction_(\n        'math_median',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  if #t == 0 then\n    return 0\n  end\n  local temp = {}\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      table.insert(temp, v)\n    end\n  end\n  table.sort(temp)\n  if #temp % 2 == 0 then\n    return (temp[#temp / 2] + temp[(#temp / 2) + 1]) / 2\n  else\n    return temp[math.ceil(#temp / 2)]\n  end\nend\n`,\n      );\n      break;\n\n    case 'MODE':\n      // As a list of numbers can contain more than one mode,\n      // the returned result is provided as an array.\n      // The generator version includes non-numbers.\n      functionName = generator.provideFunction_(\n        'math_modes',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  -- Source: http://lua-users.org/wiki/SimpleStats\n  local counts = {}\n  for _, v in ipairs(t) do\n    if counts[v] == nil then\n      counts[v] = 1\n    else\n      counts[v] = counts[v] + 1\n    end\n  end\n  local biggestCount = 0\n  for _, v  in pairs(counts) do\n    if v > biggestCount then\n      biggestCount = v\n    end\n  end\n  local temp = {}\n  for k, v in pairs(counts) do\n    if v == biggestCount then\n      table.insert(temp, k)\n    end\n  end\n  return temp\nend\n`,\n      );\n      break;\n\n    case 'STD_DEV':\n      functionName = generator.provideFunction_(\n        'math_standard_deviation',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  local m\n  local vm\n  local total = 0\n  local count = 0\n  local result\n  m = #t == 0 and 0 or ${provideSum()}(t) / #t\n  for _, v in ipairs(t) do\n    if type(v) == 'number' then\n      vm = v - m\n      total = total + (vm * vm)\n      count = count + 1\n    end\n  end\n  result = math.sqrt(total / (count-1))\n  return result\nend\n`,\n      );\n      break;\n\n    case 'RANDOM':\n      functionName = generator.provideFunction_(\n        'math_random_list',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(t)\n  if #t == 0 then\n    return nil\n  end\n  return t[math.random(#t)]\nend\n`,\n      );\n      break;\n\n    default:\n      throw Error('Unknown operator: ' + func);\n  }\n  return [functionName + '(' + list + ')', Order.HIGH];\n}\n\nexport function math_modulo(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Remainder computation.\n  const argument0 =\n    generator.valueToCode(block, 'DIVIDEND', Order.MULTIPLICATIVE) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'DIVISOR', Order.MULTIPLICATIVE) || '0';\n  const code = argument0 + ' % ' + argument1;\n  return [code, Order.MULTIPLICATIVE];\n}\n\nexport function math_constrain(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Constrain a number between two limits.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const argument1 =\n    generator.valueToCode(block, 'LOW', Order.NONE) || '-math.huge';\n  const argument2 =\n    generator.valueToCode(block, 'HIGH', Order.NONE) || 'math.huge';\n  const code =\n    'math.min(math.max(' +\n    argument0 +\n    ', ' +\n    argument1 +\n    '), ' +\n    argument2 +\n    ')';\n  return [code, Order.HIGH];\n}\n\nexport function math_random_int(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Random integer between [X] and [Y].\n  const argument0 = generator.valueToCode(block, 'FROM', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'TO', Order.NONE) || '0';\n  const code = 'math.random(' + argument0 + ', ' + argument1 + ')';\n  return [code, Order.HIGH];\n}\n\nexport function math_random_float(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Random fraction between 0 and 1.\n  return ['math.random()', Order.HIGH];\n}\n\nexport function math_atan2(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Arctangent of point (X, Y) in degrees from -180 to 180.\n  const argument0 = generator.valueToCode(block, 'X', Order.NONE) || '0';\n  const argument1 = generator.valueToCode(block, 'Y', Order.NONE) || '0';\n  return [\n    'math.deg(math.atan2(' + argument1 + ', ' + argument0 + '))',\n    Order.HIGH,\n  ];\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for procedure blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.procedures\n\nimport type {IfReturnBlock} from '../../blocks/procedures.js';\nimport type {Block} from '../../core/block.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function procedures_defreturn(\n  block: Block,\n  generator: LuaGenerator,\n): null {\n  // Define a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  let xfix1 = '';\n  if (generator.STATEMENT_PREFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_PREFIX, block);\n  }\n  if (generator.STATEMENT_SUFFIX) {\n    xfix1 += generator.injectId(generator.STATEMENT_SUFFIX, block);\n  }\n  if (xfix1) {\n    xfix1 = generator.prefixLines(xfix1, generator.INDENT);\n  }\n  let loopTrap = '';\n  if (generator.INFINITE_LOOP_TRAP) {\n    loopTrap = generator.prefixLines(\n      generator.injectId(generator.INFINITE_LOOP_TRAP, block),\n      generator.INDENT,\n    );\n  }\n  let branch = '';\n  if (block.getInput('STACK')) {\n    // The 'procedures_defreturn' block might not have a STACK input.\n    branch = generator.statementToCode(block, 'STACK');\n  }\n  let returnValue = '';\n  if (block.getInput('RETURN')) {\n    // The 'procedures_defnoreturn' block (which shares this code)\n    // does not have a RETURN input.\n    returnValue = generator.valueToCode(block, 'RETURN', Order.NONE) || '';\n  }\n  let xfix2 = '';\n  if (branch && returnValue) {\n    // After executing the function body, revisit this block for the return.\n    xfix2 = xfix1;\n  }\n  if (returnValue) {\n    returnValue = generator.INDENT + 'return ' + returnValue + '\\n';\n  } else if (!branch) {\n    branch = '';\n  }\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.getVariableName(variables[i]);\n  }\n  let code =\n    'function ' +\n    funcName +\n    '(' +\n    args.join(', ') +\n    ')\\n' +\n    xfix1 +\n    loopTrap +\n    branch +\n    xfix2 +\n    returnValue +\n    'end\\n';\n  code = generator.scrub_(block, code);\n  // Add % so as not to collide with helper functions in definitions list.\n  // TODO(#7600): find better approach than casting to any to override\n  // CodeGenerator declaring .definitions protected.\n  (generator as AnyDuringMigration).definitions_['%' + funcName] = code;\n  return null;\n}\n\n// Defining a procedure without a return value uses the same generator as\n// a procedure with a return value.\nexport const procedures_defnoreturn = procedures_defreturn;\n\nexport function procedures_callreturn(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Call a procedure with a return value.\n  const funcName = generator.getProcedureName(block.getFieldValue('NAME'));\n  const args = [];\n  const variables = block.getVars();\n  for (let i = 0; i < variables.length; i++) {\n    args[i] = generator.valueToCode(block, 'ARG' + i, Order.NONE) || 'nil';\n  }\n  const code = funcName + '(' + args.join(', ') + ')';\n  return [code, Order.HIGH];\n}\n\nexport function procedures_callnoreturn(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // Call a procedure with no return value.\n  // Generated code is for a function call as a statement is the same as a\n  // function call as a value, with the addition of line ending.\n  const tuple = generator.forBlock['procedures_callreturn'](\n    block,\n    generator,\n  ) as [string, number];\n  return tuple[0] + '\\n';\n}\n\nexport function procedures_ifreturn(\n  block: Block,\n  generator: LuaGenerator,\n): string {\n  // Conditionally return value from a procedure.\n  const condition =\n    generator.valueToCode(block, 'CONDITION', Order.NONE) || 'false';\n  let code = 'if ' + condition + ' then\\n';\n  if (generator.STATEMENT_SUFFIX) {\n    // Inject any statement suffix here since the regular one at the end\n    // will not get executed if the return is triggered.\n    code += generator.prefixLines(\n      generator.injectId(generator.STATEMENT_SUFFIX, block),\n      generator.INDENT,\n    );\n  }\n  if ((block as IfReturnBlock).hasReturnValue_) {\n    const value = generator.valueToCode(block, 'VALUE', Order.NONE) || 'nil';\n    code += generator.INDENT + 'return ' + value + '\\n';\n  } else {\n    code += generator.INDENT + 'return\\n';\n  }\n  code += 'end\\n';\n  return code;\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for text blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.texts\n\nimport type {JoinMutatorBlock} from '../../blocks/text.js';\nimport type {Block} from '../../core/block.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function text(block: Block, generator: LuaGenerator): [string, Order] {\n  // Text value.\n  const code = generator.quote_(block.getFieldValue('TEXT'));\n  return [code, Order.ATOMIC];\n}\n\nexport function text_join(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  const joinBlock = block as JoinMutatorBlock;\n  // Create a string made up of any number of elements of any type.\n  if (joinBlock.itemCount_ === 0) {\n    return [\"''\", Order.ATOMIC];\n  } else if (joinBlock.itemCount_ === 1) {\n    const element = generator.valueToCode(block, 'ADD0', Order.NONE) || \"''\";\n    const code = 'tostring(' + element + ')';\n    return [code, Order.HIGH];\n  } else if (joinBlock.itemCount_ === 2) {\n    const element0 =\n      generator.valueToCode(block, 'ADD0', Order.CONCATENATION) || \"''\";\n    const element1 =\n      generator.valueToCode(block, 'ADD1', Order.CONCATENATION) || \"''\";\n    const code = element0 + ' .. ' + element1;\n    return [code, Order.CONCATENATION];\n  } else {\n    const elements = [];\n    for (let i = 0; i < joinBlock.itemCount_; i++) {\n      elements[i] = generator.valueToCode(block, 'ADD' + i, Order.NONE) || \"''\";\n    }\n    const code = 'table.concat({' + elements.join(', ') + '})';\n    return [code, Order.HIGH];\n  }\n}\n\nexport function text_append(block: Block, generator: LuaGenerator): string {\n  // Append to a variable in place.\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  const value =\n    generator.valueToCode(block, 'TEXT', Order.CONCATENATION) || \"''\";\n  return varName + ' = ' + varName + ' .. ' + value + '\\n';\n}\n\nexport function text_length(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // String or array length.\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text, Order.UNARY];\n}\n\nexport function text_isEmpty(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Is the string null or array empty?\n  const text = generator.valueToCode(block, 'VALUE', Order.UNARY) || \"''\";\n  return ['#' + text + ' == 0', Order.RELATIONAL];\n}\n\nexport function text_indexOf(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Search the text for a substring.\n  const substring = generator.valueToCode(block, 'FIND', Order.NONE) || \"''\";\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let functionName;\n  if (block.getFieldValue('END') === 'FIRST') {\n    functionName = generator.provideFunction_(\n      'firstIndexOf',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(str, substr, 1, true)\n  if i == nil then\n    return 0\n  end\n  return i\nend\n`,\n    );\n  } else {\n    functionName = generator.provideFunction_(\n      'lastIndexOf',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, substr)\n  local i = string.find(string.reverse(str), string.reverse(substr), 1, true)\n  if i then\n    return #str + 2 - i - #substr\n  end\n  return 0\nend\n`,\n    );\n  }\n  const code = functionName + '(' + text + ', ' + substring + ')';\n  return [code, Order.HIGH];\n}\n\nexport function text_charAt(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Get letter at index.\n  // Note: Until January 2013 this block did not have the WHERE input.\n  const where = block.getFieldValue('WHERE') || 'FROM_START';\n  const text = generator.valueToCode(block, 'VALUE', Order.NONE) || \"''\";\n  let code;\n  if (where === 'RANDOM') {\n    const functionName = generator.provideFunction_(\n      'text_random_letter',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local index = math.random(string.len(str))\n  return string.sub(str, index, index)\nend\n`,\n    );\n    code = functionName + '(' + text + ')';\n  } else {\n    let start;\n    if (where === 'FIRST') {\n      start = '1';\n    } else if (where === 'LAST') {\n      start = '-1';\n    } else {\n      const atOrder = where === 'FROM_END' ? Order.UNARY : Order.NONE;\n      const at = generator.valueToCode(block, 'AT', atOrder) || '1';\n      if (where === 'FROM_START') {\n        start = at;\n      } else if (where === 'FROM_END') {\n        start = '-' + at;\n      } else {\n        throw Error('Unhandled option (text_charAt).');\n      }\n    }\n    if (start.match(/^-?\\w*$/)) {\n      code = 'string.sub(' + text + ', ' + start + ', ' + start + ')';\n    } else {\n      // use function to avoid reevaluation\n      const functionName = generator.provideFunction_(\n        'text_char_at',\n        `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str, index)\n  return string.sub(str, index, index)\nend\n`,\n      );\n      code = functionName + '(' + text + ', ' + start + ')';\n    }\n  }\n  return [code, Order.HIGH];\n}\n\nexport function text_getSubstring(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Get substring.\n  const text = generator.valueToCode(block, 'STRING', Order.NONE) || \"''\";\n\n  // Get start index.\n  const where1 = block.getFieldValue('WHERE1');\n  const at1Order = where1 === 'FROM_END' ? Order.UNARY : Order.NONE;\n  const at1 = generator.valueToCode(block, 'AT1', at1Order) || '1';\n  let start;\n  if (where1 === 'FIRST') {\n    start = 1;\n  } else if (where1 === 'FROM_START') {\n    start = at1;\n  } else if (where1 === 'FROM_END') {\n    start = '-' + at1;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n\n  // Get end index.\n  const where2 = block.getFieldValue('WHERE2');\n  const at2Order = where2 === 'FROM_END' ? Order.UNARY : Order.NONE;\n  const at2 = generator.valueToCode(block, 'AT2', at2Order) || '1';\n  let end;\n  if (where2 === 'LAST') {\n    end = -1;\n  } else if (where2 === 'FROM_START') {\n    end = at2;\n  } else if (where2 === 'FROM_END') {\n    end = '-' + at2;\n  } else {\n    throw Error('Unhandled option (text_getSubstring)');\n  }\n  const code = 'string.sub(' + text + ', ' + start + ', ' + end + ')';\n  return [code, Order.HIGH];\n}\n\nexport function text_changeCase(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Change capitalization.\n  const operator = block.getFieldValue('CASE');\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  let functionName;\n  if (operator === 'UPPERCASE') {\n    functionName = 'string.upper';\n  } else if (operator === 'LOWERCASE') {\n    functionName = 'string.lower';\n  } else if (operator === 'TITLECASE') {\n    // There are shorter versions at\n    // http://lua-users.org/wiki/SciteTitleCase\n    // that do not preserve whitespace.\n    functionName = generator.provideFunction_(\n      'text_titlecase',\n      `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(str)\n  local buf = {}\n  local inWord = false\n  for i = 1, #str do\n    local c = string.sub(str, i, i)\n    if inWord then\n      table.insert(buf, string.lower(c))\n      if string.find(c, \"%s\") then\n        inWord = false\n      end\n    else\n      table.insert(buf, string.upper(c))\n      inWord = true\n    end\n  end\n  return table.concat(buf)\nend\n`,\n    );\n  }\n  const code = functionName + '(' + text + ')';\n  return [code, Order.HIGH];\n}\n\nexport function text_trim(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Trim spaces.\n  const OPERATORS = {LEFT: '^%s*(,-)', RIGHT: '(.-)%s*$', BOTH: '^%s*(.-)%s*$'};\n  type OperatorOption = keyof typeof OPERATORS;\n  const operator = OPERATORS[block.getFieldValue('MODE') as OperatorOption];\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.gsub(' + text + ', \"' + operator + '\", \"%1\")';\n  return [code, Order.HIGH];\n}\n\nexport function text_print(block: Block, generator: LuaGenerator): string {\n  // Print statement.\n  const msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  return 'print(' + msg + ')\\n';\n}\n\nexport function text_prompt_ext(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Prompt function.\n  let msg;\n  if (block.getField('TEXT')) {\n    // Internal message.\n    msg = generator.quote_(block.getFieldValue('TEXT'));\n  } else {\n    // External message.\n    msg = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  }\n\n  const functionName = generator.provideFunction_(\n    'text_prompt',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(msg)\n  io.write(msg)\n  io.flush()\n  return io.read()\nend\n`,\n  );\n  let code = functionName + '(' + msg + ')';\n\n  const toNumber = block.getFieldValue('TYPE') === 'NUMBER';\n  if (toNumber) {\n    code = 'tonumber(' + code + ', 10)';\n  }\n  return [code, Order.HIGH];\n}\n\nexport const text_prompt = text_prompt_ext;\n\nexport function text_count(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const sub = generator.valueToCode(block, 'SUB', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_(\n    'text_count',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle)\n  if #needle == 0 then\n    return #haystack + 1\n  end\n  local i = 1\n  local count = 0\n  while true do\n    i = string.find(haystack, needle, i, true)\n    if i == nil then\n      break\n    end\n    count = count + 1\n    i = i + #needle\n  end\n  return count\nend\n`,\n  );\n  const code = functionName + '(' + text + ', ' + sub + ')';\n  return [code, Order.HIGH];\n}\n\nexport function text_replace(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const from = generator.valueToCode(block, 'FROM', Order.NONE) || \"''\";\n  const to = generator.valueToCode(block, 'TO', Order.NONE) || \"''\";\n  const functionName = generator.provideFunction_(\n    'text_replace',\n    `\nfunction ${generator.FUNCTION_NAME_PLACEHOLDER_}(haystack, needle, replacement)\n  local buf = {}\n  local i = 1\n  while i <= #haystack do\n    if string.sub(haystack, i, i + #needle - 1) == needle then\n      for j = 1, #replacement do\n        table.insert(buf, string.sub(replacement, j, j))\n      end\n      i = i + #needle\n    else\n      table.insert(buf, string.sub(haystack, i, i))\n      i = i + 1\n    end\n  end\n  return table.concat(buf)\nend\n`,\n  );\n  const code = functionName + '(' + text + ', ' + from + ', ' + to + ')';\n  return [code, Order.HIGH];\n}\n\nexport function text_reverse(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  const text = generator.valueToCode(block, 'TEXT', Order.NONE) || \"''\";\n  const code = 'string.reverse(' + text + ')';\n  return [code, Order.HIGH];\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for variable blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.variables\n\nimport type {Block} from '../../core/block.js';\nimport type {LuaGenerator} from './lua_generator.js';\nimport {Order} from './lua_generator.js';\n\nexport function variables_get(\n  block: Block,\n  generator: LuaGenerator,\n): [string, Order] {\n  // Variable getter.\n  const code = generator.getVariableName(block.getFieldValue('VAR'));\n  return [code, Order.ATOMIC];\n}\n\nexport function variables_set(block: Block, generator: LuaGenerator): string {\n  // Variable setter.\n  const argument0 = generator.valueToCode(block, 'VALUE', Order.NONE) || '0';\n  const varName = generator.getVariableName(block.getFieldValue('VAR'));\n  return varName + ' = ' + argument0 + '\\n';\n}\n","/**\n * @license\n * Copyright 2016 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Lua code generator class, including helper methods for\n * generating Lua for blocks.\n *\n * Based on Ellen Spertus's blocky-lua project.\n */\n\n// Former goog.module ID: Blockly.Lua\n\nimport type {Block} from '../../core/block.js';\nimport {CodeGenerator} from '../../core/generator.js';\nimport {inputTypes} from '../../core/inputs/input_types.js';\nimport {Names} from '../../core/names.js';\nimport * as stringUtils from '../../core/utils/string.js';\nimport type {Workspace} from '../../core/workspace.js';\n\n/**\n * Order of operation ENUMs.\n * http://www.lua.org/manual/5.3/manual.html#3.4.8\n */\n// prettier-ignore\nexport enum Order {\n  ATOMIC = 0,    // literals\n  // The next level was not explicit in documentation and inferred by Ellen.\n  HIGH = 1,            // Function calls, tables[]\n  EXPONENTIATION = 2,  // ^\n  UNARY = 3,           // not # - ~\n  MULTIPLICATIVE = 4,  // * / %\n  ADDITIVE = 5,        // + -\n  CONCATENATION = 6,   // ..\n  RELATIONAL = 7,      // < > <=  >= ~= ==\n  AND = 8,             // and\n  OR = 9,              // or\n  NONE = 99,\n}\n\n/**\n * Lua code generator class.\n *\n * Note: Lua is not supporting zero-indexing since the language itself is\n * one-indexed, so the generator does not repoct the oneBasedIndex configuration\n * option used for lists and text.\n */\nexport class LuaGenerator extends CodeGenerator {\n  constructor(name = 'Lua') {\n    super(name);\n    this.isInitialized = false;\n\n    // Copy Order values onto instance for backwards compatibility\n    // while ensuring they are not part of the publically-advertised\n    // API.\n    //\n    // TODO(#7085): deprecate these in due course.  (Could initially\n    // replace data properties with get accessors that call\n    // deprecate.warn().)\n    for (const key in Order) {\n      // Must assign Order[key] to a temporary to get the type guard to work;\n      // see https://github.com/microsoft/TypeScript/issues/10530.\n      const value = Order[key];\n      // Skip reverse-lookup entries in the enum.  Due to\n      // https://github.com/microsoft/TypeScript/issues/55713 this (as\n      // of TypeScript 5.5.2) actually narrows the type of value to\n      // never - but that still allows the following assignment to\n      // succeed.\n      if (typeof value === 'string') continue;\n      (this as unknown as Record<string, Order>)['ORDER_' + key] = value;\n    }\n\n    // List of illegal variable names.  This is not intended to be a\n    // security feature.  Blockly is 100% client-side, so bypassing\n    // this list is trivial.  This is intended to prevent users from\n    // accidentally clobbering a built-in object or function.\n    this.addReservedWords(\n      // Special character\n      '_,' +\n        // From theoriginalbit's script:\n        // https://github.com/espertus/blockly-lua/issues/6\n        '__inext,assert,bit,colors,colours,coroutine,disk,dofile,error,fs,' +\n        'fetfenv,getmetatable,gps,help,io,ipairs,keys,loadfile,loadstring,math,' +\n        'native,next,os,paintutils,pairs,parallel,pcall,peripheral,print,' +\n        'printError,rawequal,rawget,rawset,read,rednet,redstone,rs,select,' +\n        'setfenv,setmetatable,sleep,string,table,term,textutils,tonumber,' +\n        'tostring,turtle,type,unpack,vector,write,xpcall,_VERSION,__indext,' +\n        // Not included in the script, probably because it wasn't enabled:\n        'HTTP,' +\n        // Keywords (http://www.lua.org/pil/1.3.html).\n        'and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,' +\n        'or,repeat,return,then,true,until,while,' +\n        // Metamethods (http://www.lua.org/manual/5.2/manual.html).\n        'add,sub,mul,div,mod,pow,unm,concat,len,eq,lt,le,index,newindex,call,' +\n        // Basic functions (http://www.lua.org/manual/5.2/manual.html,\n        // section 6.1).\n        'assert,collectgarbage,dofile,error,_G,getmetatable,inpairs,load,' +\n        'loadfile,next,pairs,pcall,print,rawequal,rawget,rawlen,rawset,select,' +\n        'setmetatable,tonumber,tostring,type,_VERSION,xpcall,' +\n        // Modules (http://www.lua.org/manual/5.2/manual.html, section 6.3).\n        'require,package,string,table,math,bit32,io,file,os,debug',\n    );\n  }\n\n  /**\n   * Initialise the database of variable names.\n   *\n   * @param workspace Workspace to generate code from.\n   */\n  init(workspace: Workspace) {\n    // Call Blockly.CodeGenerator's init.\n    super.init(workspace);\n\n    if (!this.nameDB_) {\n      this.nameDB_ = new Names(this.RESERVED_WORDS_);\n    } else {\n      this.nameDB_.reset();\n    }\n    this.nameDB_.setVariableMap(workspace.getVariableMap());\n    this.nameDB_.populateVariables(workspace);\n    this.nameDB_.populateProcedures(workspace);\n\n    this.isInitialized = true;\n  }\n\n  /**\n   * Prepend the generated code with the variable definitions.\n   *\n   * @param code Generated code.\n   * @returns Completed code.\n   */\n  finish(code: string): string {\n    // Convert the definitions dictionary into a list.\n    const definitions = Object.values(this.definitions_);\n    // Call Blockly.CodeGenerator's finish.\n    code = super.finish(code);\n    this.isInitialized = false;\n\n    this.nameDB_!.reset();\n    return definitions.join('\\n\\n') + '\\n\\n\\n' + code;\n  }\n\n  /**\n   * Naked values are top-level blocks with outputs that aren't plugged into\n   * anything. In Lua, an expression is not a legal statement, so we must assign\n   * the value to the (conventionally ignored) _.\n   * http://lua-users.org/wiki/ExpressionsAsStatements\n   *\n   * @param line Line of generated code.\n   * @return Legal line of code.\n   */\n  scrubNakedValue(line: string): string {\n    return 'local _ = ' + line + '\\n';\n  }\n\n  /**\n   * Encode a string as a properly escaped Lua string, complete with\n   * quotes.\n   *\n   * @param string Text to encode.\n   * @returns Lua string.\n   */\n  quote_(string: string): string {\n    string = string\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\n/g, '\\\\\\n')\n      .replace(/'/g, \"\\\\'\");\n    return \"'\" + string + \"'\";\n  }\n\n  /**\n   * Encode a string as a properly escaped multiline Lua string, complete with\n   * quotes.\n   *\n   * @param string Text to encode.\n   * @returns Lua string.\n   */\n  multiline_quote_(string: string): string {\n    const lines = string.split(/\\n/g).map(this.quote_);\n    // Join with the following, plus a newline:\n    // .. '\\n' ..\n    return lines.join(\" .. '\\\\n' ..\\n\");\n  }\n\n  /**\n   * Common tasks for generating Lua from blocks.\n   * Handles comments for the specified block and any connected value blocks.\n   * Calls any statements following this block.\n   * @param block The current block.\n   * @param code The Lua code created for this block.\n   * @param thisOnly True to generate code for only this statement.\n   * @returns Lua code with comments and subsequent blocks added.\n   */\n  scrub_(block: Block, code: string, thisOnly = false): string {\n    let commentCode = '';\n    // Only collect comments for blocks that aren't inline.\n    if (!block.outputConnection || !block.outputConnection.targetConnection) {\n      // Collect comment for this block.\n      let comment = block.getCommentText();\n      if (comment) {\n        comment = stringUtils.wrap(comment, this.COMMENT_WRAP - 3);\n        commentCode += this.prefixLines(comment, '-- ') + '\\n';\n      }\n      // Collect comments for all value arguments.\n      // Don't collect comments for nested statements.\n      for (let i = 0; i < block.inputList.length; i++) {\n        if (block.inputList[i].type === inputTypes.VALUE) {\n          const childBlock = block.inputList[i].connection!.targetBlock();\n          if (childBlock) {\n            comment = this.allNestedComments(childBlock);\n            if (comment) {\n              commentCode += this.prefixLines(comment, '-- ');\n            }\n          }\n        }\n      }\n    }\n    const nextBlock =\n      block.nextConnection && block.nextConnection.targetBlock();\n    const nextCode = thisOnly ? '' : this.blockToCode(nextBlock);\n    return commentCode + code + nextCode;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Generating Lua for dynamic variable blocks.\n */\n\n// Former goog.module ID: Blockly.Lua.variablesDynamic\n\n// Lua is dynamically typed.\nexport {\n  variables_get as variables_get_dynamic,\n  variables_set as variables_set_dynamic,\n} from './variables.js';\n","/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @file Complete helper functions for generating Lua for\n *     blocks.  This is the entrypoint for lua_compressed.js.\n */\n\n// Former goog.module ID: Blockly.Lua.all\n\nimport * as lists from './lua/lists.js';\nimport * as logic from './lua/logic.js';\nimport * as loops from './lua/loops.js';\nimport {LuaGenerator} from './lua/lua_generator.js';\nimport * as math from './lua/math.js';\nimport * as procedures from './lua/procedures.js';\nimport * as text from './lua/text.js';\nimport * as variables from './lua/variables.js';\nimport * as variablesDynamic from './lua/variables_dynamic.js';\n\nexport * from './lua/lua_generator.js';\n\n/**\n * Lua code generator instance.\n */\nexport const luaGenerator = new LuaGenerator();\n\n// Install per-block-type generator functions:\nconst generators: typeof luaGenerator.forBlock = {\n  ...lists,\n  ...logic,\n  ...loops,\n  ...math,\n  ...procedures,\n  ...text,\n  ...variables,\n  ...variablesDynamic,\n};\nfor (const name in generators) {\n  luaGenerator.forBlock[name] = generators[name];\n}\n"]}